TN1 <- prediction$TN1 # predicted theta1
TN2 <- prediction$TN2 #"predicted" theta2
## To plot the results we need the variables T1,T2,TN1,TN2
plot.double.pendulum.init(L, pen.width=0.01,name="Pendulum ANN")
t_init <- 500
plot.double.pendulum(T1[t_init], T2[t_init], L, col="blue")
plot.double.pendulum(TN1[t_init], TN2[t_init], L, col="red")
for(i in (t_init+1):1000){
plot.double.pendulum(T1[i-1], T2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(T1[i], T2[i], L, col="blue")
plot.double.pendulum(TN1[i-1], TN2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(TN1[i], TN2[i], L, col="red")
Sys.sleep(0.1)
# cat(paste(i, "\n"))
}
## Uncomment if you want to plot thetas
plot.thetas(500:1000,T1,T2,TN1,TN2,abs(T1-TN1),abs(T2-TN2))
source('D:/UTN/AM/L3-AM/src/double.pendulum.R')
## Initial Values
theta1=pi/2
theta2=pi/2
h=0.01
p.theta1=0
p.theta2=0
#values of theta1 predicted by ANN
theta1.ann <- c(0,0)
#values of theta2 predicted by ANN
theta2.ann <- c(0,0)
#values of theta1 predicted by SVR
theta1.svr <- c(0,0)
#values of theta2 predicted by SVR
theta2.svr <- c(0,0)
## Create the initial dataset
## Please complete the function "create_dataset"
mydataset <- create_dataset(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
T1 <- mydataset$T1 #"real" theta1
T2 <- mydataset$T2 #"real" theta2
X <- mydataset$X
Y <- mydataset$Y
## spliting the datasets for training & testing phases
split_perc <- 0.6
splits <- split.data(mydataset$X, split_perc)
X.train <- splits$train
X.test <- splits$test
splits <- split.data(mydataset$Y, split_perc)
Y.train <- splits$train
Y.test <- splits$test
## ANN
m <- nnet(x=X.train, y=Y.train, size=4, maxit=500, linout=TRUE,abstol = 1.0e-4, reltol = 1.0e-4)
# predict for ANN. Call the method predict.ann
prediction <- prediction.pendulum.by.ann(ann.model=m,theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
TN1 <- prediction$TN1 # predicted theta1
TN2 <- prediction$TN2 #"predicted" theta2
## To plot the results we need the variables T1,T2,TN1,TN2
plot.double.pendulum.init(L, pen.width=0.01,name="Pendulum ANN")
t_init <- 500
plot.double.pendulum(T1[t_init], T2[t_init], L, col="blue")
plot.double.pendulum(TN1[t_init], TN2[t_init], L, col="red")
for(i in (t_init+1):1000){
plot.double.pendulum(T1[i-1], T2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(T1[i], T2[i], L, col="blue")
plot.double.pendulum(TN1[i-1], TN2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(TN1[i], TN2[i], L, col="red")
Sys.sleep(0.1)
# cat(paste(i, "\n"))
}
source('D:/UTN/AM/L3-AM/src/double.pendulum.R')
## Initial Values
theta1=pi/2
theta2=pi/2
h=0.01
p.theta1=0
p.theta2=0
#values of theta1 predicted by ANN
theta1.ann <- c(0,0)
#values of theta2 predicted by ANN
theta2.ann <- c(0,0)
#values of theta1 predicted by SVR
theta1.svr <- c(0,0)
#values of theta2 predicted by SVR
theta2.svr <- c(0,0)
## Create the initial dataset
## Please complete the function "create_dataset"
mydataset <- create_dataset(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
T1 <- mydataset$T1 #"real" theta1
T2 <- mydataset$T2 #"real" theta2
X <- mydataset$X
Y <- mydataset$Y
## spliting the datasets for training & testing phases
split_perc <- 0.6
splits <- split.data(mydataset$X, split_perc)
X.train <- splits$train
X.test <- splits$test
splits <- split.data(mydataset$Y, split_perc)
Y.train <- splits$train
Y.test <- splits$test
## ANN
m <- nnet(x=X.train, y=Y.train, size=4, maxit=500, linout=TRUE,abstol = 1.0e-4, reltol = 1.0e-4)
# predict for ANN. Call the method predict.ann
prediction <- prediction.pendulum.by.ann(ann.model=m,theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
TN1 <- prediction$TN1 # predicted theta1
TN2 <- prediction$TN2 #"predicted" theta2
## To plot the results we need the variables T1,T2,TN1,TN2
plot.double.pendulum.init(L, pen.width=0.01,name="Pendulum ANN")
t_init <- 500
plot.double.pendulum(T1[t_init], T2[t_init], L, col="blue")
plot.double.pendulum(TN1[t_init], TN2[t_init], L, col="red")
for(i in (t_init+1):1000){
plot.double.pendulum(T1[i-1], T2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(T1[i], T2[i], L, col="blue")
plot.double.pendulum(TN1[i-1], TN2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(TN1[i], TN2[i], L, col="red")
Sys.sleep(0.1)
# cat(paste(i, "\n"))
}
## Initial Values
theta1=pi/2
theta2=pi/2
h=0.01
p.theta1=0
p.theta2=0
#values of theta1 predicted by ANN
theta1.ann <- c(0,0)
#values of theta2 predicted by ANN
theta2.ann <- c(0,0)
#values of theta1 predicted by SVR
theta1.svr <- c(0,0)
#values of theta2 predicted by SVR
theta2.svr <- c(0,0)
## Create the initial dataset
## Please complete the function "create_dataset"
mydataset <- create_dataset(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
T1 <- mydataset$T1 #"real" theta1
T2 <- mydataset$T2 #"real" theta2
X <- mydataset$X
Y <- mydataset$Y
## spliting the datasets for training & testing phases
split_perc <- 0.6
splits <- split.data(mydataset$X, split_perc)
X.train <- splits$train
X.test <- splits$test
splits <- split.data(mydataset$Y, split_perc)
Y.train <- splits$train
Y.test <- splits$test
## ANN
m <- nnet(x=X.train, y=Y.train, size=4, maxit=500, linout=TRUE,abstol = 1.0e-4, reltol = 1.0e-4)
# predict for ANN. Call the method predict.ann
prediction <- prediction.pendulum.by.ann(ann.model=m,theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
TN1 <- prediction$TN1 # predicted theta1
TN2 <- prediction$TN2 #"predicted" theta2
## To plot the results we need the variables T1,T2,TN1,TN2
plot.double.pendulum.init(L, pen.width=0.01,name="Pendulum ANN")
t_init <- 500
plot.double.pendulum(T1[t_init], T2[t_init], L, col="blue")
plot.double.pendulum(TN1[t_init], TN2[t_init], L, col="red")
for(i in (t_init+1):1000){
plot.double.pendulum(T1[i-1], T2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(T1[i], T2[i], L, col="blue")
plot.double.pendulum(TN1[i-1], TN2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(TN1[i], TN2[i], L, col="red")
Sys.sleep(0.1)
# cat(paste(i, "\n"))
}
m1 <- svm(x=X.train, y=Y.train[,1])
m2 <- svm(x=X.train, y=Y.train[,2])
m1
m2
predict(svr1.model, c(T1[i-2],T1[i-1],T2[i-2],T2[i-1]))
svr1.model = m1
svr2.model = m2
iter <- 1000
T1 <- NULL
T2 <- NULL
T1.pred <- c(0,0)
T2.pred <- c(0,0)
result <- next_thetas(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
theta1=result$theta[1]
theta2=result$theta[2]
p.theta1=result$moment[1]
p.theta2=result$moment[2]
T1 <- c(T1,theta1)
T2 <- c(T2,theta2)
result <- next_thetas(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
theta1=result$theta[1]
theta2=result$theta[2]
p.theta1=result$moment[1]
p.theta2=result$moment[2]
T1 <- c(T1,theta1)
T2 <- c(T2,theta2)
result <- next_thetas(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
theta1=result$theta[1]
theta2=result$theta[2]
p.theta1=result$moment[1]
p.theta2=result$moment[2]
T1 <- c(T1,theta1)
T2 <- c(T2,theta2)
i <- 3
predict(svr1.model, c(T1[i-2],T1[i-1],T2[i-2],T2[i-1]))
predict(svr2.model, c(T1[i-2],T1[i-1],T2[i-2],T2[i-1]))
predict(svr1.model, c(T1[i-2],T1[i-1]))
predict(svr1.model, c(T1[i-2],T1[i-1]))
predict(svr1.model, 1
)
predict(svr1.model, 1)
predict(svr1.model, c(T1[i-2],T1[i-1]))
predict(svr1.model, c(T1[i-2],T1[i-1]))
iter <- 1000
T1 <- NULL
T2 <- NULL
T1.pred <- c(0,0)
T2.pred <- c(0,0)
result <- next_thetas(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
theta1=result$theta[1]
theta2=result$theta[2]
p.theta1=result$moment[1]
p.theta2=result$moment[2]
T1 <- c(T1,theta1)
T2 <- c(T2,theta2)
result <- next_thetas(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
theta1=result$theta[1]
theta2=result$theta[2]
p.theta1=result$moment[1]
p.theta2=result$moment[2]
T1 <- c(T1,theta1)
T2 <- c(T2,theta2)
result <- next_thetas(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
theta1=result$theta[1]
theta2=result$theta[2]
p.theta1=result$moment[1]
p.theta2=result$moment[2]
T1 <- c(T1,theta1)
T2 <- c(T2,theta2)
i <- 3
T1[i-1]
T1[i-2]
c(T1[i-2],T1[i-1])
predict(svr1.model, c(T1[i-2],T1[i-1]))
c(T1[i-2],T1[i-1])
predict(svr1.model, T1[i-1])
predict(svr1.model, c(T1[i-2],T1[i-1],T2[i-2],T2[i-1]))
str(X.train)
m1
m2
svr1.model = m1
svr2.model = m2
iter <- 1000
T1 <- NULL
T2 <- NULL
T1.pred <- c(0,0)
T2.pred <- c(0,0)
result <- next_thetas(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
theta1=result$theta[1]
theta2=result$theta[2]
p.theta1=result$moment[1]
p.theta2=result$moment[2]
T1 <- c(T1,theta1)
T2 <- c(T2,theta2)
result <- next_thetas(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
theta1=result$theta[1]
theta2=result$theta[2]
p.theta1=result$moment[1]
p.theta2=result$moment[2]
T1 <- c(T1,theta1)
T2 <- c(T2,theta2)
result <- next_thetas(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
theta1=result$theta[1]
theta2=result$theta[2]
p.theta1=result$moment[1]
p.theta2=result$moment[2]
T1 <- c(T1,theta1)
T2 <- c(T2,theta2)
i <- 3
predict(svr1.model, c(T1[i-2],T1[i-1],T2[i-2],T2[i-1]))
array(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1]))
predict(svr1.model, array(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1])))
predict(svr1.model, t(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1])))
predict(svr1.model, t(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1])))
predict(svr2.model, t(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1])))
iter <- 1000
T1 <- NULL
T2 <- NULL
T1.pred <- c(0,0)
T2.pred <- c(0,0)
for (i in 1:iter) {
result <- next_thetas(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
theta1=result$theta[1]
theta2=result$theta[2]
p.theta1=result$moment[1]
p.theta2=result$moment[2]
T1 <- c(T1,theta1)
T2 <- c(T2,theta2)
if(i>2) {
#######
T1.pred <- predict(svr1.model, t(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1])))
T2.pred <- predict(svr2.model, t(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1])))
########
}
# plot.thetas(1:i,T1,T2,TN1,TN2,abs(T1-TN1),abs(T2-TN2), dynamic=TRUE)
}
redict(svr1.model, t(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1])))
predict(svr1.model, t(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1])))
predict(svr2.model, t(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1])))
iter <- 1000
T1 <- NULL
T2 <- NULL
T1.pred <- c(0,0)
T2.pred <- c(0,0)
for (i in 1:iter) {
result <- next_thetas(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
theta1=result$theta[1]
theta2=result$theta[2]
p.theta1=result$moment[1]
p.theta2=result$moment[2]
T1 <- c(T1,theta1)
T2 <- c(T2,theta2)
if(i>2) {
#######
T1.pred <- predict(svr1.model, t(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1])))
T2.pred <- predict(svr2.model, t(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1])))
########
}
# plot.thetas(1:i,T1,T2,TN1,TN2,abs(T1-TN1),abs(T2-TN2), dynamic=TRUE)
}
T1
T1.pred
iter <- 1000
T1 <- NULL
T2 <- NULL
T1.pred <- c(0,0)
T2.pred <- c(0,0)
for (i in 1:iter) {
result <- next_thetas(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
theta1=result$theta[1]
theta2=result$theta[2]
p.theta1=result$moment[1]
p.theta2=result$moment[2]
T1 <- c(T1,theta1)
T2 <- c(T2,theta2)
if(i>2) {
#######
T1.pred <- c(T1.pred, predict(svr1.model, t(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1]))))
T2.pred <- c(T2.pred, predict(svr2.model, t(c(T1[i-2],T1[i-1],T2[i-2],T2[i-1]))))
########
}
# plot.thetas(1:i,T1,T2,TN1,TN2,abs(T1-TN1),abs(T2-TN2), dynamic=TRUE)
}
T2
T2.pred
source('D:/UTN/AM/L3-AM/src/double.pendulum.R')
## Initial Values
theta1=pi/2
theta2=pi/2
h=0.01
p.theta1=0
p.theta2=0
#values of theta1 predicted by ANN
theta1.ann <- c(0,0)
#values of theta2 predicted by ANN
theta2.ann <- c(0,0)
#values of theta1 predicted by SVR
theta1.svr <- c(0,0)
#values of theta2 predicted by SVR
theta2.svr <- c(0,0)
## Create the initial dataset
## Please complete the function "create_dataset"
mydataset <- create_dataset(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
T1 <- mydataset$T1 #"real" theta1
T2 <- mydataset$T2 #"real" theta2
X <- mydataset$X
Y <- mydataset$Y
## spliting the datasets for training & testing phases
split_perc <- 0.6
splits <- split.data(mydataset$X, split_perc)
X.train <- splits$train
X.test <- splits$test
splits <- split.data(mydataset$Y, split_perc)
Y.train <- splits$train
Y.test <- splits$test
## ANN
m <- nnet(x=X.train, y=Y.train, size=4, maxit=500, linout=TRUE,abstol = 1.0e-4, reltol = 1.0e-4)
# predict for ANN. Call the method predict.ann
prediction <- prediction.pendulum.by.ann(ann.model=m,theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
TN1 <- prediction$TN1 # predicted theta1
TN2 <- prediction$TN2 #"predicted" theta2
## To plot the results we need the variables T1,T2,TN1,TN2
## Uncomment if you want to plot thetas
# plot.thetas(500:1000,T1,T2,TN1,TN2,abs(T1-TN1),abs(T2-TN2))
## SVR
m1 <- svm(x=X.train, y=Y.train[,1])
m2 <- svm(x=X.train, y=Y.train[,2])
# predict for SVR
prediction <- prediction.pendulum.by.svr(svr1.model = m1, svr2.model = m2, theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
TN1 <- prediction$TN1 # predicted theta1
TN2 <- prediction$TN2 #"predicted" theta2
## To plot the results we need the variables T1,T2,TN1,TN2
TN1
plot.double.pendulum.init(L, pen.width=0.01,name="Pendulum SVR")
t_init <- 500
plot.double.pendulum(T1[t_init], T2[t_init], L, col="blue") # "real" values
plot.double.pendulum(TN1[t_init], TN2[t_init], L, col="red") # predicted values
for(i in (t_init+1):1000){
plot.double.pendulum(T1[i-1], T2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(T1[i], T2[i], L, col="blue")
plot.double.pendulum(TN1[i-1], TN2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(TN1[i], TN2[i], L, col="red")
Sys.sleep(0.1)
cat(paste(i, "\n"))
}
m1 <- svm(x=X.train, y=Y.train[,1])
m2 <- svm(x=X.train, y=Y.train[,2])
# predict for SVR
prediction <- prediction.pendulum.by.svr(svr1.model = m1, svr2.model = m2, theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
TN1 <- prediction$TN1 # predicted theta1
TN2 <- prediction$TN2 #"predicted" theta2
## To plot the results we need the variables T1,T2,TN1,TN2
plot.double.pendulum.init(L, pen.width=0.01,name="Pendulum SVR")
t_init <- 500
plot.double.pendulum(T1[t_init], T2[t_init], L, col="blue") # "real" values
plot.double.pendulum(TN1[t_init], TN2[t_init], L, col="red") # predicted values
for(i in (t_init+1):1000){
plot.double.pendulum(T1[i-1], T2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(T1[i], T2[i], L, col="blue")
plot.double.pendulum(TN1[i-1], TN2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(TN1[i], TN2[i], L, col="red")
Sys.sleep(0.1)
cat(paste(i, "\n"))
}
## Uncomment if you want to plot thetas
plot.thetas(500:1000,T1,T2,TN1,TN2,abs(T1-TN1),abs(T2-TN2))
source('D:/UTN/AM/L3-AM/src/double.pendulum.R')
source('D:/UTN/AM/L3-AM/src/double.pendulum.R')
run_pendulum_experiment
run_pendulum_experiment()
## Initial Values
theta1=pi/2
theta2=pi/2
h=0.01
p.theta1=0
p.theta2=0
#values of theta1 predicted by ANN
theta1.ann <- c(0,0)
#values of theta2 predicted by ANN
theta2.ann <- c(0,0)
#values of theta1 predicted by SVR
theta1.svr <- c(0,0)
#values of theta2 predicted by SVR
theta2.svr <- c(0,0)
## Create the initial dataset
## Please complete the function "create_dataset"
mydataset <- create_dataset(theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
T1 <- mydataset$T1 #"real" theta1
T2 <- mydataset$T2 #"real" theta2
X <- mydataset$X
Y <- mydataset$Y
## spliting the datasets for training & testing phases
split_perc <- 0.6
splits <- split.data(mydataset$X, split_perc)
X.train <- splits$train
X.test <- splits$test
splits <- split.data(mydataset$Y, split_perc)
Y.train <- splits$train
Y.test <- splits$test
## ANN
m <- nnet(x=X.train, y=Y.train, size=4, maxit=500, linout=TRUE,abstol = 1.0e-4, reltol = 1.0e-4)
# predict for ANN. Call the method predict.ann
prediction <- prediction.pendulum.by.ann(ann.model=m,theta1=theta1, theta2=theta2, h=h, p.theta1=p.theta1, p.theta2=p.theta2)
TN1 <- prediction$TN1 # predicted theta1
TN2 <- prediction$TN2 #"predicted" theta2
## To plot the results we need the variables T1,T2,TN1,TN2
plot.double.pendulum.init(L, pen.width=0.01,name="Pendulum ANN")
t_init <- 500
plot.double.pendulum(T1[t_init], T2[t_init], L, col="blue")
plot.double.pendulum(TN1[t_init], TN2[t_init], L, col="red")
for(i in (t_init+1):1000){
plot.double.pendulum(T1[i-1], T2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(T1[i], T2[i], L, col="blue")
plot.double.pendulum(TN1[i-1], TN2[i-1], L, col="white")
init.polygon( H=1.5, W=2, e=0.05, pen.width=0.01)
plot.double.pendulum(TN1[i], TN2[i], L, col="red")
Sys.sleep(0.1)
# cat(paste(i, "\n"))
}
source('D:/UTN/AM/L3-AM/src/double.pendulum.R')
run_pendulum_experiment()
source('D:/UTN/AM/L3-AM/src/double.pendulum.R')
run_pendulum_experiment()
run_pendulum_experiment()
source('D:/UTN/AM/L3-AM/src/double.pendulum.R')
run_pendulum_experiment()
source('D:/UTN/AM/L3-AM/src/double.pendulum.R')
run_pendulum_experiment()
source('D:/UTN/AM/L3-AM/src/double.pendulum.R')
run_pendulum_experiment()
source('D:/UTN/AM/L3-AM/src/double.pendulum.R')
run_pendulum_experiment()
source('D:/UTN/AM/L3-AM/src/double.pendulum.R')
run_pendulum_experiment()
source('D:/UTN/AM/L3-AM/src/double.pendulum.R')
run_pendulum_experiment()
